#include <bits/stdc++.h>
#define FOR(i, s, e) for (int i = s; i < e; ++i)

using namespace std;

int present(int table_frame[], int nf, int page)
{
    FOR(i, 0, nf) if (page == table_frame[i]) return 1;
    return 0;
}

void printtable(int table_frame[], int nf)
{
    FOR(i, 0, nf)
    {
        if (table_frame[i] == -1) printf("-- ");
        else printf("%2d ", table_frame[i]);
    }
    printf("||");
}

int findpos(int *counter, int nf)
{
    int min_count = counter[0];
    int pos = 0;
    FOR(i, 1, nf)
    {
        if (counter[i] < min_count)
        {
            min_count = counter[i];
            pos = i;
        }
    }
    return pos;
}

int main()
{
    // nf-number of frames
    int n, nf, pos = 0, faultCnt = 0;

    printf("enter number of frames\n");
    scanf("%d", &nf);
    int table_frame[nf];
    FOR(i, 0, nf) table_frame[i] = -1;

    printf("enter total number of page requests\n");
    scanf("%d", &n);
    int pages[n];

    printf("enter pages\n");
    FOR(i, 0, n) scanf("%d", &pages[i]);

    printf("position of frame table after each request\n");
    int counter[nf];
    FOR(i, 0, nf) counter[i] = 0;

    FOR(i, 0, n)
    {
        printf("page table after request from %2d || ", pages[i]);
        if (!present(table_frame, nf, pages[i]))
        {
            int pos = findpos(counter, nf);
            table_frame[pos] = pages[i];
            counter[pos] = i + 1;

            printtable(table_frame, nf);
            printf(" page fault\n");
            faultCnt++;
            continue;
        }

        FOR(j, 0, n)
        {
            if (table_frame[j] == pages[i])
            {
                counter[j] = i + 1;
                break;
            }
        }

        printtable(table_frame, nf);
        printf("\n");
    }
    printf("\nNumber of page faults : %d\n\n", faultCnt);
}